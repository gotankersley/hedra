var Encode=(function(){const CHAR_CODES_BY_NUM=['','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','~','!','@','#','$','%','^','&','*','?','+','=','<','>','{','}','(',')','[',']','"',':',';','_','-',',','.','`'];const NUMS_BY_CHAR_CODE={'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'H':8,'I':9,'J':10,'K':11,'L':12,'M':13,'N':14,'O':15,'P':16,'Q':17,'R':18,'S':19,'T':20,'U':21,'V':22,'W':23,'X':24,'Y':25,'Z':26,'a':27,'b':28,'c':29,'d':30,'e':31,'f':32,'g':33,'h':34,'i':35,'j':36,'k':37,'l':38,'m':39,'n':40,'o':41,'p':42,'q':43,'r':44,'s':45,'t':46,'u':47,'v':48,'w':49,'x':50,'y':51,'z':52,'~':53,'!':54,'@':55,'#':56,'$':57,'%':58,'^':59,'&':60,'*':61,'?':62,'+':63,'=':64,'<':65,'>':66,'{':67,'}':68,'(':69,')':70,'[':71,']':72,'"':73,':':74,';':75,'_':76,'-':77,',':78,'.':79,'`':80};const DECIMAL=10;const MAX_CODES=810;function toCodeString(array){array.sort(sortNumber);var codeStr='';var last=0;for(var i=0;i<array.length;i++){var num=array[i];diff=num-last;if(diff<DECIMAL)codeStr+=diff;else if(diff>=MAX_CODES)codeStr+=' '+diff+' ';else{codeStr+=CHAR_CODES_BY_NUM[Math.floor(diff/DECIMAL)];codeStr+=diff%DECIMAL;}
last=num;}
return codeStr;}
function fromCodeString(str){var array=[];var diff=0;for(var i=0;i<str.length;i++){var c=str.charAt(i);if(c==' '){var pos=str.indexOf(' ',i+1);diff=str.substr(i,pos-i);i=pos;}
else if(isNaN(c)){diff+=(DECIMAL*NUMS_BY_CHAR_CODE[c])+parseInt(str.charAt(i+1));i++;}
else diff+=parseInt(c);array.push(diff);}
return array;}
function sortNumber(a,b){return a-b;}
return{toCodeString:toCodeString,fromCodeString:fromCodeString}})();const PLANE=0;const TORUS=1;const SPHERE=2;const MOBIUS=3;const TORUS_KNOT=4;const HEDRA_COUNT=5;class HedraType{static toString(hedraType){hedraType=parseInt(hedraType);switch(hedraType){case PLANE:return'plane';case TORUS:return'torus';case SPHERE:return'sphere';case MOBIUS:return'mobius';case TORUS_KNOT:return'torus-knot';default:console.log('Invalid hedra type: ',hedraType);}
return'';}
static fromString(typeString){switch(typeString){case'plane':return PLANE;case'torus':return TORUS;case'sphere':return SPHERE;case'mobius':return MOBIUS;case'torus-knot':return TORUS_KNOT;default:console.log('Invalid type string',typeString);}
return-1;}}
const MOVE_INVALID=-1;const MOVE_ADJ=0;const MOVE_JUMP=1;const MOVE_PLACE=2;const MOVE_WORMHOLE=3;const QUAD=4;const HEX=6;const OCT=8;const INFINITE_LOOP=100;const PLAYER_1=0;const PLAYER_2=1;class Board{constructor(hedraType){this.hedraType=hedraType;this.turn=PLAYER_1;this.pins=[[],[]];this.paths=[{},{}];this.homes=initialHomes;this.wormholes=initialWormholes;this.wormholeDests=initialWormholeDests;}
setInitial(){this.pins=initialPins.slice();}
toString(){var state='';state+=this.hedraType+'|';state+=this.turn+'|';state+=2+'|';state+=Encode.toCodeString(this.pins[PLAYER_1])+'|';state+=Encode.toCodeString(this.pins[PLAYER_2])+'|';state+=Encode.toCodeString(Object.keys(this.paths[PLAYER_1]))+'|';state+=Encode.toCodeString(Object.keys(this.paths[PLAYER_2]));return state;}
static fromString(str){var data=str.split('|');var board=new Board(parseInt(data[0]));board.turn=parseInt(data[1]);board.pins[PLAYER_1]=Encode.fromCodeString(data[3]);board.pins[PLAYER_2]=Encode.fromCodeString(data[4]);var paths1=Encode.fromCodeString(data[5]);var paths2=Encode.fromCodeString(data[6]);for(var i=0;i<paths1.length;i++){var p=paths1[i];board.paths[PLAYER_1][p]=true;}
for(var i=0;i<paths2.length;i++){var p=paths2[i];board.paths[PLAYER_2][p]=true;}
return board;}
getMoveType(src,dst){if(!this.inBounds(src))return MOVE_INVALID;else if(!this.inBounds(dst))return MOVE_INVALID;else if(!this.hasPin(this.turn,src))return MOVE_INVALID;else if(!this.isEmpty(dst))return MOVE_INVALID;else if(this.canMoveAdj(src,dst))return MOVE_ADJ;else if(this.canJump(src,dst))return MOVE_JUMP;else if(this.canWormhole(src,dst))return MOVE_WORMHOLE;else if(this.canPlace(src,dst))return MOVE_PLACE;else return MOVE_INVALID;}
makeMove(src,dst){var moveType=this.getMoveType(src,dst);if(moveType==MOVE_INVALID)return MOVE_INVALID;var oppTurn=+(!this.turn);var playerPins=this.pins[this.turn];var pid=playerPins.indexOf(src);if(moveType==MOVE_ADJ){playerPins[pid]=dst;}
else if(moveType==MOVE_PLACE){var placeKey=Math.min(src,dst)+','+Math.max(src,dst);var oct=quadPlaces[placeKey];delete this.paths[oppTurn][oct];this.paths[this.turn][oct]=true;playerPins[pid]=dst;}
else if(moveType==MOVE_JUMP){var jumpKey=Math.min(src,dst)+','+Math.max(src,dst);var mid=quadJumps[jumpKey];playerPins[pid]=dst;var oppPid=this.pins[oppTurn].indexOf(mid);this.pins[oppTurn].splice(oppPid,1);}
else if(moveType==MOVE_WORMHOLE){var newDst=this.wormholeDests[src+','+dst]
var oppPid=this.pins[oppTurn].indexOf(newDst);var ownPid=playerPins.indexOf(newDst);if(oppPid>=0)this.pins[oppTurn].splice(oppPid,1);else if(ownPid>=0)playerPins.splice(ownPid,1);playerPins[pid]=newDst;}
return moveType;}
getMoves(){var playerPins=this.pins[this.turn];var oppTurn=+(!this.turn);var moves=[];for(var p=0;p<playerPins.length;p++){var srcPin=playerPins[p];var neighbors=quadAdj[srcPin];for(var n=0;n<neighbors.length;n++){var neighbor=neighbors[n];if(this.isEmpty(neighbor)){moves.push({src:srcPin,dst:neighbor});}
else if(this.hasPin(oppTurn,neighbor)){var midKey=srcPin+','+neighbor;var jumpDst=quadJumpsByMid[midKey];if(this.isEmpty(jumpDst))moves.push({src:srcPin,dst:jumpDst});}}
neighbors=adj[srcPin];for(var n=0;n<neighbors.length;n++){var neighbor=neighbors[n];var neighborSides=facesN[neighbor].length;if(neighborSides==OCT){var placeMidKey=srcPin+','+neighbor;var placeDst=quadPlacesByMid[placeMidKey];if(this.isEmpty(placeDst))moves.push({src:srcPin,dst:placeDst});}}}
return moves;}
inBounds(pos){if(pos>=0&&pos<facesN.length&&facesN[pos].length==QUAD)return true;else return false;}
hasPin(player,pos){if(this.pins[player].indexOf(pos)<0)return false;else return true;}
isEmpty(pos){if(this.pins[PLAYER_1].indexOf(pos)>=0)return false;else if(this.pins[PLAYER_2].indexOf(pos)>=0)return false;else return true;}
isHome(pos){if(this.homes[PLAYER_1].indexOf(pos)>=0||this.homes[PLAYER_2].indexOf(pos)>=0)return true;else return false;}
isGameOver(){if(!this.pins[PLAYER_1].length)return true;else if(!this.pins[PLAYER_2].length)return true;else if(this.isContiguous(this.turn))return true;else return false;}
isContiguous(player){var playerPaths=this.paths[player];var playerHomes=this.homes[player];var startHome=playerHomes[0];var endHome=playerHomes[1];var stack=[startHome];var visited={};visited[startHome]=true;var stuckCount=0;do{var top=stack.pop();var neighbors=adj[top];for(var n=0;n<neighbors.length;n++){var neighbor=neighbors[n];if(visited[neighbor])continue;visited[neighbor]=true;if(neighbor==endHome)return true;if(facesN[neighbor].length<=QUAD)continue;if(!playerPaths[neighbor])continue;else stack.push(neighbor);}}
while(stack.length&&stuckCount++<INFINITE_LOOP);if(stuckCount>=INFINITE_LOOP)alert('stuck in loop');return false;}
canMoveAdj(src,dst){var placeKey=Math.min(src,dst)+','+Math.max(src,dst);if(quadPlaces.hasOwnProperty(placeKey)){var oct=quadPlaces[placeKey];if(this.isHome(oct))return true;else return false;}
else if(quadAdj[src].indexOf(dst)<0)return false;else return true;}
canPlace(src,dst){var placeKey=Math.min(src,dst)+','+Math.max(src,dst);if(!quadPlaces.hasOwnProperty(placeKey))return false;else return true;}
canJump(src,dst){var jumpKey=Math.min(src,dst)+','+Math.max(src,dst);if(!quadJumps.hasOwnProperty(jumpKey))return false;var mid=quadJumps[jumpKey];var oppTurn=+(!this.turn);if(!this.hasPin(oppTurn,mid))return false;else return true;}
canWormhole(src,dst){var whKey=src+','+dst;if(!this.wormholeDests.hasOwnProperty(whKey))return false;else return true;}
changeTurn(){this.turn=+(!this.turn);}}var RandomPlayer=(function(){function play(board,onPlayed){var moves=board.getMoves();if(!moves.length)return onPlayed();var randMove=moves[Math.floor(Math.random()*moves.length)];return onPlayed(randMove.src,randMove.dst);}
return{getPlay:play}})();const EVENT_INVALID=0;const EVENT_MOVE_MADE=1;const EVENT_TURN_CHANGED=2;const EVENT_GAME_OVER=3;const EVENT_BOARD_UPDATED=4;const EVENT_MESSAGE=5;const PLAYER_HUMAN=0;const PLAYER_RANDOM=1;class Game{constructor(hedraType){this.board=new Board(hedraType);this.board.setInitial();this.gameEvents={};this.players=[PLAYER_HUMAN,PLAYER_HUMAN];var boardStr=this.board.toString();this.history=[boardStr];this.memory={};this.memory[boardStr]=true;this.undoHistory=[];}
addEventListener(name,callback){this.gameEvents[name]=callback;}
undoMove(){if(this.history.length>1){var oldStr=this.history.pop();this.undoHistory.push(oldStr);delete this.memory[oldStr];var boardStr=this.history[this.history.length-1];this.board=Board.fromString(boardStr);this.gameEvents[EVENT_BOARD_UPDATED](this.board);return true;}
return false;}
redoMove(){if(this.undoHistory.length>0){var savedStr=this.undoHistory.pop();this.history.push(savedStr);this.memory[savedStr]=true;this.board=Board.fromString(savedStr);this.gameEvents[EVENT_BOARD_UPDATED](this.board);if(this.board.isGameOver())this.gameEvents[EVENT_GAME_OVER](this.board.turn);else this.board.changeTurn();return true;}
return false;}
play(){var board=this.board;var turn=board.turn;var player=this.players[turn];if(player==PLAYER_HUMAN)return;var moves=board.getMoves();if(moves.length==0)return this.onPlayed();else if(moves.length==1)return this.onPlayed(moves[0].src,moves[0].dst);switch(player){case PLAYER_RANDOM:RandomPlayer.getPlay(board,this.onPlayed.bind(this));break;default:this.gameEvents[EVENT_MESSAGE]('Invalid player');}}
onPlayed(src,dst){var moveType=this.board.makeMove(src,dst);if(moveType==MOVE_INVALID)this.gameEvents[EVENT_INVALID]();else{var self=this;this.gameEvents[EVENT_MOVE_MADE](moveType,src,dst,function(){self.logCurrentState();if(self.board.isGameOver())self.gameEvents[EVENT_GAME_OVER](self.board.turn);else{self.board.changeTurn();self.gameEvents[EVENT_TURN_CHANGED]();self.play();}});}}
logCurrentState(){var boardStr=this.board.toString();this.history.push(boardStr);this.memory[boardStr]=true;}}
const OPTIONS_PLAYER={Human:PLAYER_HUMAN,Random:PLAYER_RANDOM};const OPTIONS_HEDRA={Plane:PLANE,Sphere:SPHERE,Torus:TORUS,Mobius:MOBIUS,'Torus-Knot':TORUS_KNOT};const LEVELS=new Array(HEDRA_COUNT);LEVELS[PLANE]=2;LEVELS[SPHERE]=2;LEVELS[TORUS]=3;LEVELS[MOBIUS]=1;LEVELS[TORUS_KNOT]=2;const LEVEL_DELIM='/';function MenuProperties(){this.hedraType=PLANE;this.hedraLevel=1;var hash=window.location.hash;if(hash){hash=hash.replace('#','');var hedraTypeString=hash.split(LEVEL_DELIM);this.hedraType=HedraType.fromString(hedraTypeString[0]);if(hedraTypeString.length==2)this.hedraLevel=hedraTypeString[1];}
this.showCenters=false;this.showGrid=true;this.showFaces=true;this.autoCamera=true;this.rules=function(){window.open('rules.html','_blank');}
this.hexPath=(this.hedraType==SPHERE)?true:false;this.minorRadiusWin=(this.hedraType==TORUS)?true:false;this.player1=PLAYER_HUMAN;this.player2=PLAYER_HUMAN;}
function MenuManager(){this.properties=new MenuProperties();this.rootMenu=new dat.GUI();var displayMenu=this.rootMenu.addFolder('Options');displayMenu.add(this.properties,'showCenters').onChange(function(val){centers.visible=val;});displayMenu.add(this.properties,'showFaces').onChange(this.onShowFaces);displayMenu.add(this.properties,'showGrid').onChange(function(val){grid.visible=val;});var rulesMenu=this.rootMenu.addFolder('Rules');rulesMenu.add(this.properties,'rules');if(this.properties.hedraType==SPHERE)rulesMenu.add(this.properties,'hexPath');if(this.properties.hedraType==TORUS)rulesMenu.add(this.properties,'minorRadiusWin');this.rootMenu.add(this.properties,'autoCamera');this.rootMenu.add(this.properties,'hedraType',OPTIONS_HEDRA).onChange(this.onChangeHedra);this.rootMenu.add(this.properties,'player1',OPTIONS_PLAYER).onChange(this.onChangePlayer);this.rootMenu.add(this.properties,'player2',OPTIONS_PLAYER).onChange(this.onChangePlayer);}
MenuManager.prototype.onChangePlayer=function(val){game.players=[parseInt(menu.player1),parseInt(menu.player2)];game.play();}
MenuManager.prototype.onChangeHedra=function(val){var hedraString=HedraType.toString(val);if(hedraString){window.location.hash=hedraString;window.location.reload();}}
MenuManager.prototype.onShowFaces=function(val){world.visible=val;if(!val)gridMat.color.setHex(COLOR_GRID2);else gridMat.color.setHex(COLOR_GRID1);}
var menuManager=new MenuManager();var menu=menuManager.properties;var levelCount=LEVELS[menu.hedraType];if(levelCount){var propertyNodes=document.querySelectorAll('.dg.main .property-name');var node;for(var n=0;n<propertyNodes.length;n++){var title=propertyNodes[n].innerHTML;if(title=='hedraType'){node=propertyNodes[n];break;}}
var selectNode=document.createElement('select');var selectString='';for(var s=0;s<=levelCount;s++){if(s==menu.hedraLevel)selectString+='<option selected="selected">'+s+'</option>';else selectString+='<option>'+s+'</option>';}
selectNode.innerHTML=selectString;node.nextSibling.appendChild(selectNode);selectNode.onchange=function(e){if(!e)var e=window.event;var newSize=this.options[this.selectedIndex].value;window.location.hash=HedraType.toString(menu.hedraType)+LEVEL_DELIM+newSize;window.location.reload();}}
if(menu.hexPath){Board.prototype.oldMakeMove=Board.prototype.makeMove;Board.prototype.makeMove=function(src,dst){var moveType=this.oldMakeMove(src,dst);if(!menu.hexPath)return moveType;var neighbors=adj[dst];for(var n=0;n<neighbors.length;n++){var neighbor=neighbors[n];if(facesN[neighbor].length==HEX){var hex=neighbor;var turn=this.turn;var oppTurn=+(!turn);var playerPins=this.pins[turn];var playerPath=this.paths[turn];if(playerPath[hex])break;else if(this.homes[turn].indexOf(hex)>=0)break;var hexNeighbors=adj[hex];var pinCount=0;for(var h=0;h<hexNeighbors.length;h++){var hexNeighbor=hexNeighbors[h];if(facesN[hexNeighbor].length!=QUAD)continue;else if(playerPins.indexOf(hexNeighbor)>=0)pinCount++;}
if(pinCount>=2){delete this.paths[oppTurn][hex];playerPath[hex]=true;setFaceColor(hex,COLOR_PLAYERS[turn]);break;}}}
return moveType;}}
var RuleMinorRadiusWin=(function(){const RING_EPSILON=0.001;var closerPathsByHome={};var fartherPathsByHome={};var bottomRingByHome={};function initRule(board){var origin=new THREE.Vector3();var homes1=board.homes[PLAYER_1];var homes2=board.homes[PLAYER_2];var homes=homes1.concat(homes2);for(h=0;h<homes.length;h++){var homeFid=homes[h];var home=centroids[homeFid];var homeDist=home.distanceTo(origin);var closerPaths={};var fartherPaths={};var bottomRing={};for(var fid=0;fid<facesN.length;fid++){if(facesN[fid].length==QUAD)continue;var face=centroids[fid];var dist=face.distanceTo(origin);if(Math.abs(dist-homeDist)>RING_EPSILON){if(dist>homeDist)fartherPaths[fid]=true;else closerPaths[fid]=true;}
else{if(face.y<=0)bottomRing[fid]=true;closerPaths[fid]=true;}}
var keys;closerPathsByHome[homeFid]=closerPaths;fartherPathsByHome[homeFid]=fartherPaths;bottomRingByHome[homeFid]=bottomRing;}}
Board.prototype.oldIsGameOver=Board.prototype.isGameOver;Board.prototype.isGameOver=function(){var isOver=this.oldIsGameOver();if(isOver)return true;else if(!menu.minorRadiusWin)return false;var homes=this.homes[this.turn];for(h=0;h<homes.length;h++){var home=homes[h];if(this.isMinorRadiusWin(home))return true;}
return false;}
Board.prototype.isMinorRadiusWin=function(startHome){var closerPaths=closerPathsByHome[startHome];var fartherPaths=fartherPathsByHome[startHome];var bottomRing=bottomRingByHome[startHome];var path=this.findPath(startHome,bottomRing,closerPaths,false);if(path[0]){var endHome={};endHome[startHome]=true;var mid=path[1];path=this.findPath(mid,endHome,fartherPaths,true);return path[0];}
return false;}
Board.prototype.findPath=function(start,end,paths,checkEndFirst){var playerPaths=this.paths[this.turn];var stack=[start];var visited={};visited[start]=true;var stuckCount=0;do{var top=stack.pop();visited[top]=true;var neighbors=adj[top];for(var n=0;n<neighbors.length;n++){var neighbor=neighbors[n];if(checkEndFirst&&end[neighbor])return[true,neighbor];else if(!playerPaths[neighbor])continue;else if(end[neighbor])return[true,neighbor];else if(facesN[neighbor].length<=QUAD)continue;else if(!paths[neighbor])continue;else if(visited[neighbor])continue;else stack.push(neighbor);}}
while(stack.length&&stuckCount++<INFINITE_LOOP);if(stuckCount>=INFINITE_LOOP)alert('stuck in loop');return[false,-1];}
return{init:initRule}})();'use strict';var game;var container;var scene;var renderer;var controls;var raycaster=new THREE.Raycaster();var mouse=new THREE.Vector2(-1,-1);var selectedQuad=-1;var selectedPin=-1;var curFid=-1;const COLOR_P1=0xff0000;const COLOR_P2=0x0000ff;const COLOR_BASES=[COLOR_P1,COLOR_P2];const COLOR_PLAYERS=[0xdd0000,0x0000dd];const COLOR_WINS=[0xdd0000,0x0000dd];const COLOR_STARS=[0xdd0000,0x0000dd];const COLOR_HOVER=0x00ffff;const COLOR_SELECTED=0xa4c6c5;const COLOR_WORLD=0xffffff;const COLOR_GRID1=0x0;const COLOR_GRID2=0xffffff;const COLOR_QUAD=0xefefef;const COLOR_WORMHOLES=[0x66ff66,0xb2ffb2];const SCALE_TANK=0.02;const SCALE_TANK_HOVER=0.03;const SCALE_STAR=0.15;const EPSILON_SELECT=0.2;const DURATION_MESSAGE=3000;const DISTANCE_CAMERA_INITIAL=5;const KEY_Z=90;const KEY_Y=89;const KEY_LEFT=37;const KEY_RIGHT=39;var originMat=new THREE.MeshNormalMaterial({wireframe:true});var pinMat=new THREE.MeshNormalMaterial();var worldMat=new THREE.MeshBasicMaterial({color:0xffffff,vertexColors:THREE.FaceColors});var playerMats=[new THREE.MeshBasicMaterial({color:COLOR_P1}),new THREE.MeshBasicMaterial({color:COLOR_P2}),];var starMats=[new THREE.MeshBasicMaterial({color:COLOR_STARS[0]}),new THREE.MeshBasicMaterial({color:COLOR_STARS[1]}),];var gridMat=new THREE.LineBasicMaterial({color:COLOR_GRID1});var selectedMat=new THREE.MeshLambertMaterial({color:0x00ff00,opacity:0.1,transparent:true});var tankMats;var centers=new THREE.Group();var camera;var origin;var faceOrigin;var pinObjs={};var grid;var world;var tankGeo;var selectedSphere;var board;function init(hedraType){var hedraTypeString=HedraType.toString(hedraType);game=new Game(hedraType);board=game.board;scene=new THREE.Scene;var SCREEN_WIDTH=window.innerWidth;var SCREEN_HEIGHT=window.innerHeight;var VIEW_ANGLE=45;var ASPECT=SCREEN_WIDTH / SCREEN_HEIGHT;var NEAR=0.1;var FAR=200;camera=new THREE.PerspectiveCamera(VIEW_ANGLE,ASPECT,NEAR,FAR);scene.add(camera);if(hedraType==SPHERE||hedraType==TORUS)camera.position.set(0,0,DISTANCE_CAMERA_INITIAL);else camera.position.set(0,DISTANCE_CAMERA_INITIAL,0);renderer=new THREE.WebGLRenderer({antialias:true});renderer.setSize(SCREEN_WIDTH,SCREEN_HEIGHT);renderer.setClearColor(0x444444,1);container=document.createElement('container');document.body.appendChild(container);container.appendChild(renderer.domElement);controls=new THREE.OrbitControls(camera,renderer.domElement);controls.center=new THREE.Vector3(0,0,0);window.addEventListener('mousemove',onMouseMove,false);window.addEventListener('mousedown',onMouseDown,false);window.addEventListener('keydown',onKeyDown,false);game.addEventListener(EVENT_MOVE_MADE,onMoveMade);game.addEventListener(EVENT_GAME_OVER,onGameOver);game.addEventListener(EVENT_INVALID,onInvalid);game.addEventListener(EVENT_TURN_CHANGED,onTurnChanged);game.addEventListener(EVENT_MESSAGE,onMessage);game.addEventListener(EVENT_BOARD_UPDATED,onBoardUpdated);var light=new THREE.PointLight(0xffffff);camera.add(light);var loader=new THREE.JSONLoader();loader.load('/hedra/models/'+hedraTypeString+'/'+hedraTypeString+menu.hedraLevel+'.json',function(geometry,materials){loader.load('/hedra/models/tank/tank.js',function(tankLoadedGeo,tankLoadedMats){tankGeo=tankLoadedGeo;tankMats=[tankLoadedMats,new Array(tankLoadedMats.length)];for(var t=0;t<tankLoadedMats.length;t++){tankMats[PLAYER_2][t]=tankMats[PLAYER_1][t].clone();tankMats[PLAYER_2][t].color.setHex(COLOR_P2);}
world=new THREE.Mesh(geometry,worldMat);scene.add(world);var edgeGeo=new THREE.Geometry();for(var e=0;e<edgesInterleaved.length;e++){var v=world.geometry.vertices[edgesInterleaved[e]];edgeGeo.vertices.push(v);}
grid=new THREE.LineSegments(edgeGeo,gridMat);scene.add(grid);for(var f=0;f<facesN.length;f++){if(facesN[f].length==QUAD)setFaceColor(f,COLOR_QUAD,false);var arrowHelper=new THREE.ArrowHelper(norms[f],centroids[f],0.1,0x00ff00);centers.add(arrowHelper);}
scene.add(centers);centers.visible=menu.showCenters;var starGeo=createStarGeo();for(var side=0;side<=PLAYER_2;side++){var playerPins=board.pins[side];for(var p=0;p<playerPins.length;p++){var fid=playerPins[p];var pin=new THREE.Mesh(tankGeo,tankMats[side]);pin.scale.set(SCALE_TANK,SCALE_TANK,SCALE_TANK);var cent=centroids[fid];pin.up=norms[fid];pin.lookAt(surfaces[fid]);var raise=norms[fid].clone().multiplyScalar(0.05);pin.position.copy(cent).add(raise);pinObjs[fid]=pin;scene.add(pin);}
var playerBases=board.homes[side];setFaceColor(playerBases[0],COLOR_BASES[side],false);setFaceColor(playerBases[1],COLOR_BASES[side],false);createStar(starGeo,playerBases[0],side);createStar(starGeo,playerBases[1],side);}
var whColor=new THREE.Color(COLOR_WORMHOLES[0]);var whColor2=new THREE.Color(COLOR_WORMHOLES[1]);var tween=new TWEEN.Tween(whColor);tween.to({r:whColor2.r,g:whColor2.g,b:whColor2.b},5000);tween.repeat(Infinity);tween.yoyo(true);tween.easing(TWEEN.Easing.Quadratic.InOut)
tween.onUpdate(function(){for(var w=0;w<board.wormholes.length;w++){var fid=board.wormholes[w];setFaceColor(fid,whColor.getHex(),true);}});tween.start();var selectedGeo=new THREE.SphereGeometry(0.2,12,12);selectedSphere=new THREE.Mesh(selectedGeo,selectedMat);selectedSphere.visible=false;scene.add(selectedSphere);if(menu.minorRadiusWin)RuleMinorRadiusWin.init(board);sendMessage('Size: '+facesN.length);render();});});}
function createStarGeo(){var alpha=(2*Math.PI)/ 10;var star=new THREE.Shape();for(var i=11;i!=0;i--){var r=(i%2+1)/2;var omega=alpha*i;star.lineTo((r*Math.sin(omega)),(r*Math.cos(omega)));}
return new THREE.ShapeGeometry(star);}
function createStar(starGeo,homeFid,player){var starMesh=new THREE.Mesh(starGeo,starMats[player]);starMesh.up=surfaces[homeFid];starMesh.lookAt(norms[homeFid]);starMesh.scale.set(SCALE_STAR,SCALE_STAR,SCALE_STAR);surfaces[homeFid]
var cent=centroids[homeFid];var raise=norms[homeFid].clone().multiplyScalar(0.001);starMesh.position.copy(cent).add(raise);scene.add(starMesh);}
function onGameOver(winner){renderer.setClearColor(COLOR_WINS[winner],1);alert('Player '+(winner+1)+' Wins...\n\nGAME OVER!');}
function onInvalid(){sendMessage('Invalid Move');}
function onMessage(message){sendMessage(message);}
function sendMessage(message){var msg=document.getElementById('message');msg.innerText=message;msg.style.display='block';setTimeout(function(){msg.style.display='none';},DURATION_MESSAGE);}
function onBoardUpdated(newBoard){var pinFids=Object.keys(pinObjs);for(var p=0;p<pinFids.length;p++){var fid=pinFids[p];scene.remove(pinObjs[fid]);delete pinObjs[fid];}
for(var side=0;side<=PLAYER_2;side++){var playerPaths=board.paths[side];var pathKeys=Object.keys(playerPaths);for(var p=0;p<pathKeys.length;p++){var fid=pathKeys[p];setFaceColor(fid,COLOR_WORLD);}}
board=newBoard;for(var side=0;side<=PLAYER_2;side++){var playerPins=board.pins[side];for(var p=0;p<playerPins.length;p++){var fid=playerPins[p];var pin=new THREE.Mesh(tankGeo,tankMats[side]);pin.scale.set(SCALE_TANK,SCALE_TANK,SCALE_TANK);var cent=centroids[fid];pin.up=norms[fid];pin.lookAt(surfaces[fid]);var raise=norms[fid].clone().multiplyScalar(0.05);pin.position.copy(cent).add(raise);pinObjs[fid]=pin;scene.add(pin);}
var playerPaths=board.paths[side];var pathKeys=Object.keys(playerPaths);for(var p=0;p<pathKeys.length;p++){var fid=pathKeys[p];setFaceColor(fid,COLOR_PLAYERS[side],false);}}
world.geometry.colorsNeedUpdate=true;}
function onKeyDown(e){if(e.ctrlKey||e.keyCode==KEY_LEFT||e.keyCode==KEY_RIGHT){if(e.keyCode==KEY_Z||e.keyCode==KEY_LEFT){game.undoMove();}
else if(e.keyCode==KEY_Y||e.keyCode==KEY_RIGHT){game.redoMove();}}}
function onMouseMove(e){mouse.x=(e.clientX / window.innerWidth)*2-1;mouse.y=-(e.clientY / window.innerHeight)*2+1;}
function onMouseDown(e){mouse.x=(e.clientX / window.innerWidth)*2-1;mouse.y=-(e.clientY / window.innerHeight)*2+1;raycaster.setFromCamera(mouse,camera);var intersects=raycaster.intersectObjects([world]);if(intersects.length){var tfid=intersects[0].faceIndex;var fid=triToN[tfid];if(e.ctrlKey)return console.log(fid);var isValidQuad=false;if(facesN[fid].length==QUAD)isValidQuad=true;else if(curFid>=0){var hoverVsClickDist=intersects[0].point.distanceTo(centroids[curFid]);if(hoverVsClickDist<EPSILON_SELECT){fid=curFid;isValidQuad=true;}}
if(isValidQuad){if(selectedQuad<0){if(board.hasPin(board.turn,fid)){selectedQuad=fid;setFaceColor(fid,COLOR_SELECTED);selectedPin=pinObjs[fid];selectedPin.scale.set(SCALE_TANK_HOVER,SCALE_TANK_HOVER,SCALE_TANK_HOVER);selectedSphere.visible=true;}
else onMessage('Opponent\'s Piece...');}
else if(board.hasPin(board.turn,fid)){pinObjs[selectedQuad].scale.set(SCALE_TANK,SCALE_TANK,SCALE_TANK);selectedQuad=fid;setFaceColor(fid,COLOR_SELECTED,true);selectedPin=pinObjs[fid];selectedPin.scale.set(SCALE_TANK_HOVER,SCALE_TANK_HOVER,SCALE_TANK_HOVER);}
else game.onPlayed(selectedQuad,fid);}}}
function onMoveMade(moveType,src,dst,onAnimFinished){if(menu.hedraType!=PLANE&&game.players[board.turn]!=PLAYER_HUMAN&&menu.autoCamera){var startPos=camera.position;var srcPos=pinObjs[src].position.clone();var srcNorm=norms[src].clone().multiplyScalar(3);var endPos=srcPos.add(srcNorm);var coords={x:startPos.x,y:startPos.y,z:startPos.z};var tween=new TWEEN.Tween(coords);tween.to({x:endPos.x,y:endPos.y,z:endPos.z},1000);tween.easing(TWEEN.Easing.Quadratic.In);tween.onUpdate(function(){camera.position.set(coords.x,coords.y,coords.z);});tween.onComplete(function(){makeMove(moveType,src,dst);onAnimFinished();});tween.start();}
else{makeMove(moveType,src,dst);onAnimFinished();}}
function makeMove(moveType,src,dst){if(moveType==MOVE_ADJ)setPinPos(src,dst);else if(moveType==MOVE_PLACE){var placeKey=Math.min(src,dst)+','+Math.max(src,dst);var oct=quadPlaces[placeKey];setPinPos(src,dst);setFaceColor(oct,COLOR_PLAYERS[board.turn]);}
else if(moveType==MOVE_JUMP){var jumpKey=Math.min(src,dst)+','+Math.max(src,dst);var mid=quadJumps[jumpKey];scene.remove(pinObjs[mid]);delete pinObjs[mid];setPinPos(src,dst);}
else if(moveType==MOVE_WORMHOLE){var newDst=board.wormholeDests[src+','+dst];console.log('wh',src,dst,newDst);if(pinObjs[newDst]){scene.remove(pinObjs[newDst]);delete pinObjs[newDst];}
setPinPos(src,newDst);}}
function onTurnChanged(){if(selectedQuad>=0)setFaceColor(selectedQuad,COLOR_QUAD);selectedQuad=-1;selectedPin=-1;selectedSphere.visible=false;}
function setPinPos(srcFid,dstFid){var pin=pinObjs[srcFid];delete pinObjs[srcFid];pinObjs[dstFid]=pin;pin.up=norms[dstFid];pin.position.set(0,0,0);pin.lookAt(surfaces[dstFid]);var cent=centroids[dstFid];var raise=norms[dstFid].clone().multiplyScalar(0.05);pin.position.copy(cent).add(raise);pin.scale.set(SCALE_TANK,SCALE_TANK,SCALE_TANK);}
function setFaceColor(fid,col,update){var tfids=nToTri[fid];for(var t=0;t<tfids.length;t++){var tf=tfids[t];world.geometry.faces[tf].color.setHex(col);}
if(typeof(update)=='undefined')world.geometry.colorsNeedUpdate=true;else world.geometry.colorsNeedUpdate=update;}
function render(time){requestAnimationFrame(render);controls.update();TWEEN.update(time);raycaster.setFromCamera(mouse,camera);var intersects=raycaster.intersectObjects([world]);if(intersects.length){var tfid=intersects[0].faceIndex;var fid=triToN[tfid];if(facesN[fid].length==QUAD){if(curFid!=selectedQuad){setFaceColor(curFid,COLOR_QUAD,false);}
if(fid!=selectedQuad){setFaceColor(fid,COLOR_HOVER,true);curFid=fid;}}
if(selectedPin!=-1){var point=intersects[0].point;var pos=selectedPin.position;var plane=new THREE.Plane(norms[selectedQuad]);plane.translate(pos);var selectedIntersect=plane.projectPoint(point);var dir=new THREE.Vector3(pos.x-selectedIntersect.x,pos.y-selectedIntersect.y,pos.z-selectedIntersect.z);dir.normalize();selectedPin.up=norms[selectedQuad];selectedPin.position.set(0,0,0);selectedPin.lookAt(dir);var cent=centroids[selectedQuad];var raise=norms[selectedQuad].clone().multiplyScalar(0.05);selectedPin.position.copy(cent).add(raise);selectedSphere.position.set(cent.x,cent.y,cent.z);}}
renderer.render(scene,camera);}